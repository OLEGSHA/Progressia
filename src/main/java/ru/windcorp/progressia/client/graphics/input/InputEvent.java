/*
 * Progressia
 * Copyright (C)  2020-2021  Wind Corporation and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package ru.windcorp.progressia.client.graphics.input;

import ru.windcorp.progressia.client.graphics.gui.Component;

/**
 * An instance of user input.
 * <p>
 * User input events are typically generated by graphics backend between frames
 * and passed to the graphics layers from top to bottom. Layers that use
 * {@link Component}s will forward this event through the Component hierarchy.
 * <p>
 * Events have a {@code consumed} flag. A freshly-generated event will have this
 * flag set to {@code false}. Event listeners that process the event will
 * usually choose to raise the flag ("consume the event") to ask future
 * listeners to ignore this event. This is done to avoid multiple UI interfaces
 * reacting to single input. By default, listeners will not receive consumed
 * events; however, some listeners may choose to receive, handle and even
 * un-consume the event.
 * <p>
 * {@code InputEvent} objects may be reused for future input events after their
 * processing is complete; to obtain a static copy, use {@link #snapshot()}.
 */
public abstract class InputEvent {

	private double time;

	private boolean isConsumed = false;

	public InputEvent(double time) {
		this.time = time;
	}

	protected void setTime(double time) {
		this.time = time;
	}

	public double getTime() {
		return time;
	}

	public abstract InputEvent snapshot();

	public boolean isConsumed() {
		return isConsumed;
	}

	public void setConsumed(boolean isConsumed) {
		this.isConsumed = isConsumed;
	}

	public void consume() {
		setConsumed(true);
	}

}
